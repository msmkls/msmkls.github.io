{
    "version": "https://jsonfeed.org/version/1",
    "title": "旺笔迹",
    "subtitle": "傀儡师の后院",
    "icon": "https://msmkls.github.io/images/favicon.ico",
    "description": "日常学习，点滴记录，软硬件食用各种教程",
    "home_page_url": "https://msmkls.github.io",
    "items": [
        {
            "id": "https://msmkls.github.io/posts/6346bbd.html",
            "url": "https://msmkls.github.io/posts/6346bbd.html",
            "title": "clouddrive在linux（云主机/vps）下挂载过程",
            "date_published": "2023-07-03T09:12:24.000Z",
            "content_html": "<h2 id=\"基本环境\"><a class=\"markdownIt-Anchor\" href=\"#基本环境\">#</a> <strong>基本环境</strong></h2>\n<h3 id=\"ps\"><a class=\"markdownIt-Anchor\" href=\"#ps\">#</a> <strong>ps：</strong></h3>\n<ul>\n<li>VPS（这里指的是网站服务器）或者本地计算机、虚拟机下的 linux 系统：Ubuntu、centos、Debian… 等 借助工具：docker （这里以宝塔面板为基础的图形界面，虽然熟悉后不怎么用，但方便初接触者）</li>\n<li>挂载到网站服务器上，clouddrive 不像其他挂载工具那样，只是分享下载，clouddrive 更纯粹，你可以把它理解成真实的硬盘，如果你 PHP 基础比较好，可以结合给视频站或下载站等使用，这里不多做赘述。</li>\n<li>这里有个问题挂载服务器应当遵守网盘使用条款使用，如果把阿里云盘挂载到其他国家的云服务器上，可能会触发账号的使用机制，阿里云盘条款不允许国外使用，如果在国外云主机使用可能会刷不出来二维码或登录不上，像 115 网盘可能会触发异地登录等风险，只要在国内包括香港，都没什么大问题）</li>\n</ul>\n<p>以下演示仅供初步接触者参考使用，大佬请略过即可，较真抬杠的请进群找大佬们，谢谢支持！</p>\n<h3 id=\"docker项目地址\"><a class=\"markdownIt-Anchor\" href=\"#docker项目地址\">#</a> <strong>Docker 项目地址</strong></h3>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL2Nsb3VkbmFzL2Nsb3VkZHJpdmU=\">cloudnas/clouddrive</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL2Nsb3VkbmFzL2Nsb3VkZHJpdmUyLXVuc3RhYmxl\">clouddrive2-unstable</span></p>\n</li>\n</ul>\n<h3 id=\"docker部署命令\"><a class=\"markdownIt-Anchor\" href=\"#docker部署命令\">#</a> <strong>Docker 部署命令</strong></h3>\n<ol>\n<li>根据 clouddrive 的命令，在 ssh 输入命令</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/systemd/system/docker.service.d/</pre></td></tr></table></figure><ul>\n<li>接着</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> /etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[Service]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>MountFlags=shared</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>EOF</span></pre></td></tr></table></figure><ul>\n<li>PS：执行完，没有任何提示就对了！</li>\n</ul>\n<ol>\n<li>拉取 clouddrive 镜像部署</li>\n</ol>\n<p>命令是结合 Ubuntu、centos、Debian 的相通目录结构 选择的目录为： <code>/mnt</code>  下 进行部署 为主机中的映射卷启用共享挂载 <code>mount --make-shared /</code></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mount --make-shared /</pre></td></tr></table></figure><ul>\n<li>Ps: 可以通过 <code>df -h</code>  命令查看宿主的挂载点，结合使用，例如我要挂载到 <code>/mnt</code>  这个目录下，挂载点在 <code>/</code>  目录下所以命令是上面的 <code>mount --make-shared /</code></li>\n<li>如果过挂在成功把上面这条命令加到开机执行，不然主机重启会导致挂载失败</li>\n</ul>\n<p><img data-src=\"https://img.kls.red/i/2023/07/03/zbf0gi-0.png\" alt=\"img\"></p>\n<ul>\n<li>\n<p>如果挂载到其他目录下面，把下面 <code>/mnt</code>  的路径 替换成你自己的即可</p>\n<p><strong>CD1：</strong></p>\n</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run <span class=\"token operator\">-</span>d \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token comment\">--name clouddrive \\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">--restart unless-stopped \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>mnt<span class=\"token operator\">/</span>CloudNAS<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>CloudNAS<span class=\"token punctuation\">:</span>shared \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>mnt<span class=\"token operator\">/</span>Config<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>Config \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">--network host \\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">--pid host \\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token comment\">--privileged \\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token comment\">--device /dev/fuse:/dev/fuse \\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     cloudnas<span class=\"token operator\">/</span>clouddrive</pre></td></tr></table></figure><p><strong>CD2：</strong></p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run <span class=\"token operator\">-</span>d \\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token comment\">--name clouddrive \\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">--restart unless-stopped \\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">--env CLOUDDRIVE_HOME=/Config \\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>mnt<span class=\"token operator\">/</span>CloudNAS<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>CloudNAS<span class=\"token punctuation\">:</span>shared \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token operator\">-</span>v <span class=\"token operator\">/</span>mnt<span class=\"token operator\">/</span>Config<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>Config \\</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">--network host \\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">--pid host \\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token comment\">--privileged \\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token comment\">--device /dev/fuse:/dev/fuse \\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     cloudnas<span class=\"token operator\">/</span>clouddrive2<span class=\"token operator\">-</span>unstable</pre></td></tr></table></figure><ul>\n<li>\n<p>执行之后没报错就说明部署成功了</p>\n<p>CD1 入口 IP:9798</p>\n<p>CD2 入口 IP:19798</p>\n</li>\n</ul>\n<h3 id=\"常见问题\"><a class=\"markdownIt-Anchor\" href=\"#常见问题\">#</a> <strong>常见问题</strong></h3>\n<p><strong>安装部署后报错</strong>  <code>Error response from daemon: Get https://registry-1.docker.io/v2/: Docker</code>  之类的 **：**</p>\n<ol>\n<li>重新执行该命令重试，有时候是受代理环境或者网络原因造成的</li>\n<li>排除 DNS 解析的问题</li>\n</ol>\n<p><strong>部署后 ip:9798 无法访问</strong></p>\n<ol>\n<li>一种是防火墙放行指定端口</li>\n<li>暴力的方式是直接关闭防火墙命令</li>\n</ol>\n<ul>\n<li>虚拟机 &amp; 本地 linux 下解决方法： centos：停止 firewall 防火墙</li>\n</ul>\n<figure class=\"highlight vbnet\"><figcaption data-lang=\"VB.Net\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl <span class=\"token keyword\">stop</span> firewalld.service</pre></td></tr></table></figure><p>关闭开机启动 firewall 防火墙命令</p>\n<figure class=\"highlight vbnet\"><figcaption data-lang=\"VB.Net\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl <span class=\"token keyword\">stop</span> firewalld.service</pre></td></tr></table></figure><ul>\n<li>Ubuntu 关闭防火墙</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> ufw disable</pre></td></tr></table></figure><ul>\n<li>Debian 关闭防火墙</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/etc/init.d/ufw stop</pre></td></tr></table></figure><p><strong>宝塔面板放行端口，具体百度即可</strong></p>\n<p><strong>vps 服务器可结合上面的方法，或者在安全组中放行 9897 端口，宝塔面板放行该端口</strong></p>\n",
            "tags": [
                "clouddrive",
                "Linux"
            ]
        },
        {
            "id": "https://msmkls.github.io/posts/9a43ef1.html",
            "url": "https://msmkls.github.io/posts/9a43ef1.html",
            "title": "X86 openwrt 如何将 CPU 模式设置为性能",
            "date_published": "2023-07-01T13:13:18.802Z",
            "content_html": "<h4 id=\"简述\"><a class=\"markdownIt-Anchor\" href=\"#简述\">#</a> <strong>简述</strong></h4>\n<p>很多人在编译后或者好不容易拿到符合自己需求的系统包后，体验一直上不去，甚至有些使用 j1900CPU 感觉还不如硬件路由</p>\n<p>例如，开网页加载慢半拍、视频加载速度上不去的感觉（特别是油管），很大的原因都是由省电模式导致的。</p>\n<p>CPU 频率在编译后，不做优化的情况下。</p>\n<p>性能模式一直是省电模式运行，特别对于硬件配置低、或高配硬件达不到应有体验</p>\n<p><strong>实例：处理器： 英特尔（R） 赛扬（R） J4125 CPU @ 2.00GHz</strong></p>\n<h4 id=\"通过\"><a class=\"markdownIt-Anchor\" href=\"#通过\">#</a> <strong>通过</strong></h4>\n<p>命令查询当前频率</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /proc/cpuinfo <span class=\"token operator\">|</span><span class=\"token function\">grep</span> MHz<span class=\"token operator\">|</span><span class=\"token function\">uniq</span></pre></td></tr></table></figure><h4 id=\"结果\"><a class=\"markdownIt-Anchor\" href=\"#结果\">#</a> <strong>结果</strong></h4>\n<p>为</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">cpu MHz</span>         <span class=\"token punctuation\">:</span> <span class=\"token number\">1201.146</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">cpu MHz</span>         <span class=\"token punctuation\">:</span> <span class=\"token number\">1200.982</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">cpu MHz</span>         <span class=\"token punctuation\">:</span> <span class=\"token number\">1200.165</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">cpu MHz</span>         <span class=\"token punctuation\">:</span> <span class=\"token number\">1200.076</span></pre></td></tr></table></figure><h4 id=\"命令\"><a class=\"markdownIt-Anchor\" href=\"#命令\">#</a> <strong>命令</strong></h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /sys/devices/system/cpu/</pre></td></tr></table></figure><p>通过上面命令可以看到核心数<br>\n例如： <code>cpu0 cpu1 cpu2 cpu3 ...</code></p>\n<h4 id=\"查询\"><a class=\"markdownIt-Anchor\" href=\"#查询\">#</a> <strong>查询</strong></h4>\n<p>查看当前运行 CPU 模式（这里是 CPU0 为例）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor</pre></td></tr></table></figure><h4 id=\"结果-2\"><a class=\"markdownIt-Anchor\" href=\"#结果-2\">#</a> <strong>结果</strong></h4>\n<ul>\n<li>\n<p>powersave （节能模式）</p>\n</li>\n<li>\n<p>performance （性能模式）</p>\n<p>需要说明的是，这里的性能模式，一般是指高频空载，非满载模式，满载类似烤机那种，</p>\n<p>空载只是把 CPU 核心频率以最高频率运行任务，致使硬件性能最大化。</p>\n</li>\n</ul>\n<p>如果是节能模式，我们通过命令对每个核心做性能模式切换调整</p>\n<h4 id=\"调整命令参考\"><a class=\"markdownIt-Anchor\" href=\"#调整命令参考\">#</a> <strong>调整命令参考</strong></h4>\n<figure class=\"highlight ruby\"><figcaption data-lang=\"ruby\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>echo performance <span class=\"token operator\">>></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy0<span class=\"token operator\">/</span>scaling_governor</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>echo performance <span class=\"token operator\">>></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy1<span class=\"token operator\">/</span>scaling_governor</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>echo performance <span class=\"token operator\">>></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy2<span class=\"token operator\">/</span>scaling_governor</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>echo performance <span class=\"token operator\">>></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy3<span class=\"token operator\">/</span>scaling_governor</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>echo <span class=\"token number\">2700000</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy0<span class=\"token operator\">/</span>scaling_min_freq</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>echo <span class=\"token number\">2700000</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy1<span class=\"token operator\">/</span>scaling_min_freq</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>echo <span class=\"token number\">2700000</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy2<span class=\"token operator\">/</span>scaling_min_freq</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>echo <span class=\"token number\">2700000</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy3<span class=\"token operator\">/</span>scaling_min_freq</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>echo <span class=\"token number\">2700000</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy0<span class=\"token operator\">/</span>scaling_min_freq</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>echo <span class=\"token number\">2700000</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy1<span class=\"token operator\">/</span>scaling_min_freq</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>echo <span class=\"token number\">2700000</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy2<span class=\"token operator\">/</span>scaling_min_freq</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>echo <span class=\"token number\">2700000</span> <span class=\"token operator\">></span> <span class=\"token operator\">/</span>sys<span class=\"token operator\">/</span>devices<span class=\"token operator\">/</span>system<span class=\"token operator\">/</span>cpu<span class=\"token operator\">/</span>cpufreq<span class=\"token operator\">/</span>policy3<span class=\"token operator\">/</span>scaling_min_freq</pre></td></tr></table></figure><p><strong>其他系统上高性能模式，例如 centos 或 ubuntu</strong> <a href=\"http://xn--blog-9d0ix46agy8cj1fne.kls.red/\"><strong>转载请注明 blog.kls.red</strong></a> <strong>.</strong></p>\n",
            "tags": [
                "食用系列",
                "openwrt",
                "cpu高频空载模式"
            ]
        }
    ]
}